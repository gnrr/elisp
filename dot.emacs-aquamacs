;;; dot.emacs-aquamacs
;;;
;;; for aquamacs on mac
;;;
;;;

(message "loading .emacs-aquamacs")

;;;
;;; themes
;;;
(setq load-path (append '("~/elisp/themes/") load-path))

;; (require 'color-theme-solarized) (color-theme-solarized-dark)
;; (require 'color-theme-tango) (color-theme-tango)
;; (require 'color-theme-tangotango) (color-theme-tangotango)
;; (require 'color-theme-zenburn) (color-theme-zenburn)
(require 'color-theme-almost-monokai) (color-theme-almost-monokai)


;;;
;;; font
;;;
(set-face-attribute 'default nil :family "menlo" :height 140) 
(set-fontset-font (frame-parameter nil 'font) 'japanese-jisx0208 (font-spec :family "hiragino maru gothic pron") nil 'append) 
(set-fontset-font (frame-parameter nil 'font) 'japanese-jisx0212 (font-spec :family "hiragino maru gothic pron") nil 'append) 
(add-to-list 'face-font-rescale-alist '("^-apple-hiragino_.*" . 1.1))


;;;
;;; unbinding and key binding
;;;
(setq mac-option-modifier 'meta)            ; default meta <= option key
(keyboard-translate ?\C-h ?\C-?)            ; c-h

(define-key osx-key-mode-map (kbd "A-n") nil)   ; alt-n
(define-key osx-key-mode-map (kbd "A-p") nil)
(define-key osx-key-mode-map (kbd "A-h") nil)
(define-key osx-key-mode-map (kbd "A-;") nil)  ; spellcheck-now
(define-key osx-key-mode-map [(S-A-left)]  'tabbar-backward)
(define-key osx-key-mode-map [(S-A-right)] 'tabbar-forward)
(define-key osx-key-mode-map [f11] 'tabbar-backward)
(define-key osx-key-mode-map [f12] 'tabbar-forward)
(define-key osx-key-mode-map [end]  'end-of-line)
(define-key osx-key-mode-map [home] 'beginning-of-line)

(define-key global-map `[(,osxkeys-command-key \')] nil)  ; comment-or-uncomment-region-or-line

(global-set-key "\M-n" 'aquamacs-page-down)
(global-set-key "\M-p" 'aquamacs-page-up)
(global-set-key "\M-h"    'backward-kill-word)
(global-set-key "\M-\C-f" 'ns-toggle-fullscreen)
(global-set-key "\M-\S-n" 'end-of-buffer)
(global-set-key "\M-\S-p" 'beginning-of-buffer)

(global-set-key "\M-g" 'goto-line)
(global-set-key "\M-v" 'new-empty-buffer-other-frame)
(global-set-key ";" 'comment-set-column)         ; c-x ;
(global-set-key [24 67108923] 'comment-indent)     ; c-x c-;
(global-set-key "\C-xt" 'revert-buffer)            ; c-x t
(global-set-key "\C-x\C-t" 'toggle-truncate-lines) ; c-x c-t
(global-set-key "\C-xnf" 'narrow-to-defun)

(global-set-key "\M-9" 'insert-parentheses)


;;;
;;; setting
;;;
(setq auto-mode-alist
      (cons '("\\.emacs.*$" . lisp-interaction-mode)
        auto-mode-alist))


(blink-cursor-mode 0)
(setq default-cursor-type 'box)
(tool-bar-mode -1)
(setq ring-bell-function 'ignore)

;; tab setting
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-stop-list  '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))

(setq default-truncate-lines t)             ; 折り返しなし


;;; アイコンやdockから起動したemacsのpathやexec-pathが正しく設定されてないのをなんとかする
;;; http://yukihr.github.com/blog/2012/03/02/emacs-path-settings/
;; when opened from desktep entry, path won't be set to shell's value.
(let ((path-str
       (replace-regexp-in-string "\n+$" "" (shell-command-to-string "echo $path"))))
    (setenv "path" path-str)
    (setq exec-path (nconc (split-string path-str ":") exec-path)))


;; 日本語環境設定 for mac
;; http://maro.air-nifty.com/maro/2009/02/carbon-emacs-sh.html
;; (set-language-environment "japanese")
(set-language-environment 'utf-8)
(prefer-coding-system 'utf-8-unix)
(setq default-buffer-file-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)

;; http://sakito.jp/emacs/emacsshell.html#id7
(cond ((or (eq window-system 'mac) (eq window-system 'ns))
       ;; mac os x の hfs+ ファイルフォーマットではファイル名は nfd (の様な物)で扱うため以下の設定をする必要がある
       (require 'ucs-normalize)
       (setq file-name-coding-system 'utf-8-hfs)
       (setq locale-coding-system 'utf-8-hfs))
      (or (eq system-type 'cygwin) (eq system-type 'windows-nt)
          (setq file-name-coding-system 'utf-8)
          (setq locale-coding-system 'utf-8)
          ;; もしコマンドプロンプトを利用するなら sjis にする
          ;; (setq file-name-coding-system 'sjis)
          ;; (setq locale-coding-system 'sjis)
          ;; 古い cygwin だと euc-jp にする
          ;; (setq file-name-coding-system 'euc-jp)
          ;; (setq locale-coding-system 'euc-jp)
          )
      (t
       (setq file-name-coding-system 'utf-8)
       (setq locale-coding-system 'utf-8)))

;; kill-ringに同じ内容を重複して入れない
(defadvice kill-new (before ys:no-kill-new-duplication activate)
  (setq kill-ring (delete (ad-get-arg 0) kill-ring)))

(setq inhibit-startup-echo-area-message t)    ; aquamacs

;;;
;;; additional elisp package
;;;

;; hippie-expand (pre-installed)
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list try-expand-line
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

(global-set-key "\M-/" 'hippie-expand)

;; re-builder
(add-hook 'reb-mode-hook
      '(lambda ()
         (define-key reb-mode-map "\C-xk" 'reb-quit)))

(defalias 'reb 're-builder)

;; mic-paren
(when (or (string-match "XEmacs\\|Lucid" emacs-version) window-system)
  (require 'mic-paren) ; loading
  (paren-activate)     ; activating
  ;; coloring inside between each parentheses
  (setq paren-match-face 'region)
  (setq paren-sexp-mode t)
  )

(show-paren-mode t)
;; (add-hook 'c-mode-common-hook
;;	     (function (lambda ()
;;		      (paren-toggle-open-paren-context 1))))




;;;
;;; command aliases
;;;

;; iro mihon
(defalias 'color-list 'list-colors-display)

;; edebug-defun
(require 'edebug)
(eval-after-load "edebug"
  '(defalias 'edebug 'edebug-defun))

;; apropos
(defalias 'a 'apropos)

;; vimpulse
;(require 'my-vimpulse)
;(viper-go-away)

;;;
;;; my-hack
;;;

;; confirm when hit cmd+w
(defadvice close-window (around close-window-adv activate)
  (if (region-active-p) (call-interactively 'kill-ring-save)
    (if (y-or-n-p-with-timeout "really close? " 2 nil) ad-do-it
      (message ""))))

;(defadvice recentf-mode (before my-recentf-adv activate)
(add-hook 'recentf-dialog-mode-hook
          '(lambda ()
  ;; (define-key recentf-mode-map "j" 'widget-forward)
  ;; (define-key recentf-mode-map "k" 'widget-backward)
))

(defun apropos-next ()
  (interactive)
  (goto-char (1+ (point)))
  (re-search-forward "^[^ ]")
  (beginning-of-line))

(defun apropos-prev ()
  (interactive)
  (beginning-of-line)
  (goto-char (1- (point)))
  (re-search-backward "^[^ ]")
  (beginning-of-line))

(defadvice apropos-mode (after my-apropos-adv activate)
  (define-key apropos-mode-map "j" 'apropos-next)
  (define-key apropos-mode-map "k" 'apropos-prev))

;;;
;;; my-additional elisp
;;;
(load-library "discrete")
(load-library "mac")
